29/08/2022

Concept will be a game, the ultimate aim is to utilise SQL to store information.

Workers will have stats that determine their ability to create wealth for "The Company".

A user can skip time (day, week, month, year) which will simulate the progression.
- An option to pause if something comes up - like an employee asking for more money (which could be negotiated, if the
user interacts), or if an employee exits the company (all reasons), if there's a threshold (below and above) the company
 money reaches (can't set it too high, else the game could be run until the end).

Goal is to reach Â£1m (if this is successful this could be increased to higher amounts).

Users can skip time, fire, advertise, increase(/decrease) an employees wages, with other events planned.

Employees will be stored in a database.

Choosing to advertise for new employees will lead to random applications, with randomly generated stats and wage
demands, and hiring will be a complex process (and will cost).

An algorithm must be made for:
    - How much is generated by the person depending on their stats.
    - How much a person thinks their wage is worth.
    - A persons' happiness (wage, hours)
    - Generating potential employees
    - When an employee will ask for a higher wage (or reduced/increased hours?)
    - When an employee will leave (this will be stats based)

Ability to plot the changes of an employee over time would be great (think plotting how an employees' happiness has
changed over time, or other stats).

Plotting wealth over time on request would be great; staff retention, overall staff happiness.

Season can impact wealth gain (Christmas increase, option to give bonuses).

SQL - ability to sort employees, filter
    - Financial gains per month will be documented, ability to sort, organise etc.

Will have to be text based as I explore initial design.

Will be done in phases due to the high-level of plans currently made above!

------ Phase 1 -------
-- A bad employee
-- A good employee
-- A set amount of money
-- Basic stats (that still allows bad/good employees to be distinct)
-- Simulate jumping a month.

----- Phase 2 --------
-- Firing employees.
-- Hiring employees (basic system, doesn't cost, employees aren't generated).

----- Phase 3 --------
-- SQL integration